/**
 * Sistema Inteligente de Sele√ß√£o de Tabelas Normativas
 * 
 * Regras de Prioridade:
 * 1. Contexto Tr√¢nsito/CNH (quando aplic√°vel)
 * 2. S√£o Paulo > Sudeste > Outras regi√µes
 * 3. Faixa et√°ria espec√≠fica > Geral
 * 4. Escolaridade espec√≠fica > Geral
 */

const { query } = require('../config/database');

/**
 * Calcula idade a partir da data de nascimento
 */
function calcularIdade(dataNascimento) {
  if (!dataNascimento) return null;
  
  const hoje = new Date();
  const nascimento = new Date(dataNascimento);
  let idade = hoje.getFullYear() - nascimento.getFullYear();
  const mes = hoje.getMonth() - nascimento.getMonth();
  
  if (mes < 0 || (mes === 0 && hoje.getDate() < nascimento.getDate())) {
    idade--;
  }
  
  return idade;
}

/**
 * Seleciona a melhor tabela normativa baseada nos crit√©rios do paciente
 * 
 * @param {string} tipoTeste - Tipo do teste (mig, ac, rotas, etc.)
 * @param {object} paciente - Dados do paciente
 * @returns {object} { tabelaId, tabelaNome, sugestoes[] }
 */
async function selecionarTabelaNormativa(tipoTeste, paciente) {
  try {
    const idade = paciente.idade || calcularIdade(paciente.data_nascimento);
    const escolaridade = paciente.escolaridade;
    const contexto = paciente.contexto;
    const tipo_transito = paciente.tipo_transito;
    
    console.log('üîç Selecionando tabela normativa:');
    console.log(`   Teste: ${tipoTeste}`);
    console.log(`   Idade: ${idade}`);
    console.log(`   Escolaridade: ${escolaridade}`);
    console.log(`   Contexto: ${contexto}`);
    console.log(`   Tipo Tr√¢nsito: ${tipo_transito}`);
    
    // Buscar todas as tabelas normativas ativas do tipo
    const todasTabelas = await query(`
      SELECT id, nome, tipo, versao, criterio, descricao
      FROM tabelas_normativas
      WHERE tipo = $1 AND ativa = true
      ORDER BY nome
    `, [tipoTeste]);
    
    if (todasTabelas.rows.length === 0) {
      return {
        tabelaId: null,
        tabelaNome: null,
        sugestoes: [],
        erro: 'Nenhuma tabela normativa encontrada'
      };
    }
    
    const tabelas = todasTabelas.rows;
    let pontuacao = tabelas.map(t => ({ ...t, score: 0, motivos: [] }));
    
    // === SISTEMA DE PONTUA√á√ÉO ===
    
    // 1. PRIORIDADE M√ÅXIMA: S√£o Paulo (SP)
    pontuacao = pontuacao.map(t => {
      if (t.nome.includes('S√£o Paulo')) {
        t.score += 1000;
        t.motivos.push('üìç S√£o Paulo (prioridade regional)');
      }
      return t;
    });
    
    // 2. ALTA PRIORIDADE: Sudeste
    pontuacao = pontuacao.map(t => {
      if (t.nome.includes('Sudeste') && !t.nome.includes('S√£o Paulo')) {
        t.score += 800;
        t.motivos.push('üìç Regi√£o Sudeste');
      }
      return t;
    });
    
    // 3. CONTEXTO TR√ÇNSITO (se aplic√°vel) - ALTA PRIORIDADE
    if (contexto === 'Tr√¢nsito' && tipo_transito) {
      pontuacao = pontuacao.map(t => {
        // Verificar correspond√™ncia exata de tipo de tr√¢nsito
        let pontosTipo = 0;
        let motivoTipo = '';
        
        if (tipo_transito === '1¬™ Habilita√ß√£o' || tipo_transito === 'Primeira Habilita√ß√£o') {
          if (t.nome.includes('1¬™ Habilita√ß√£o')) {
            pontosTipo = 900;
            motivoTipo = 'üöó 1¬™ Habilita√ß√£o CNH';
          }
        } else if (tipo_transito === 'Renova√ß√£o' && t.nome.includes('Renova√ß√£o')) {
          pontosTipo = 900;
          motivoTipo = 'üîÑ Renova√ß√£o CNH';
        } else if (tipo_transito.includes('Mudan√ßa') && t.nome.includes('Mudan√ßa')) {
          pontosTipo = 900;
          motivoTipo = 'üîÑ Mudan√ßa de Categoria';
        } else if (tipo_transito.includes('Adi√ß√£o') && t.nome.includes('Mudan√ßa')) {
          pontosTipo = 900;
          motivoTipo = 'üîÑ Adi√ß√£o de Categoria';
        } else if (t.nome.includes('Motoristas Profissionais')) {
          pontosTipo = 850;
          motivoTipo = 'üöõ Motoristas Profissionais';
        }
        
        if (pontosTipo > 0) {
          t.score += pontosTipo;
          t.motivos.push(motivoTipo);
        }
        
        return t;
      });
    }
    
    // 4. FAIXA ET√ÅRIA (se idade v√°lida)
    if (idade !== null && idade >= 0) {
      pontuacao = pontuacao.map(t => {
        // Verificar se a tabela menciona faixa et√°ria
        const match = t.nome.match(/(\d+)-(\d+)\s*anos/);
        if (match) {
          const min = parseInt(match[1]);
          const max = parseInt(match[2]);
          if (idade >= min && idade <= max) {
            t.score += 300;
            t.motivos.push(`üë§ Faixa et√°ria ${min}-${max} anos`);
          }
        }
        return t;
      });
    }
    
    // 5. ESCOLARIDADE
    if (escolaridade) {
      pontuacao = pontuacao.map(t => {
        if (escolaridade === 'E. Fundamental' && t.nome.includes('Fundamental')) {
          t.score += 200;
          t.motivos.push('üìö Ensino Fundamental');
        } else if (escolaridade === 'E. M√©dio' && t.nome.includes('M√©dio')) {
          t.score += 200;
          t.motivos.push('üìö Ensino M√©dio');
        } else if (escolaridade === 'E. Superior' && t.nome.includes('Superior')) {
          t.score += 200;
          t.motivos.push('üìö Ensino Superior');
        }
        return t;
      });
    }
    
    // 6. TABELA GERAL (fallback com pontua√ß√£o baixa)
    pontuacao = pontuacao.map(t => {
      if (t.nome.includes('Geral') || t.nome.includes('Popula√ß√£o Brasileira')) {
        t.score += 100;
        t.motivos.push('üåê Tabela geral (abrangente)');
      }
      return t;
    });
    
    // Ordenar por pontua√ß√£o (maior para menor)
    pontuacao.sort((a, b) => b.score - a.score);
    
    // Tabela selecionada (maior pontua√ß√£o)
    const tabelaSelecionada = pontuacao[0];
    
    // Top 5 sugest√µes
    const sugestoes = pontuacao.slice(0, 5).map(t => ({
      id: t.id,
      nome: t.nome,
      score: t.score,
      motivos: t.motivos
    }));
    
    console.log('‚úÖ Tabela selecionada:', tabelaSelecionada.nome, '(Score:', tabelaSelecionada.score + ')');
    console.log('   Motivos:', tabelaSelecionada.motivos.join(', '));
    
    return {
      tabelaId: tabelaSelecionada.id,
      tabelaNome: tabelaSelecionada.nome,
      score: tabelaSelecionada.score,
      motivos: tabelaSelecionada.motivos,
      sugestoes: sugestoes,
      avisos: getAvisos(idade, escolaridade, contexto)
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao selecionar tabela normativa:', error);
    return {
      tabelaId: null,
      tabelaNome: null,
      sugestoes: [],
      erro: error.message
    };
  }
}

/**
 * Gera avisos sobre incompatibilidades
 */
function getAvisos(idade, escolaridade, contexto) {
  const avisos = [];
  
  if (contexto === 'Tr√¢nsito' && idade !== null && idade < 18) {
    avisos.push({
      tipo: 'warning',
      mensagem: `‚ö†Ô∏è Idade ${idade} anos est√° abaixo da idade m√≠nima para CNH (18 anos)`
    });
  }
  
  if (escolaridade === 'N√£o Escolarizado') {
    avisos.push({
      tipo: 'info',
      mensagem: '‚ÑπÔ∏è Escolaridade "N√£o Escolarizado" n√£o tem tabela espec√≠fica. Usando tabela geral.'
    });
  }
  
  if (idade !== null && idade < 16) {
    avisos.push({
      tipo: 'warning',
      mensagem: `‚ö†Ô∏è Idade ${idade} anos est√° fora das faixas normativas padr√£o (16-92 anos)`
    });
  }
  
  return avisos;
}

module.exports = {
  selecionarTabelaNormativa,
  calcularIdade
};

