const { query } = require('../../config/database');

async function removeLaudoUniqueConstraint() {
  try {
    console.log('üîß Iniciando migration: Remover constraint UNIQUE do numero_laudo...\n');

    // 1. Remover a constraint UNIQUE do numero_laudo
    console.log('1. Removendo constraint UNIQUE do numero_laudo...');
    await query(`
      ALTER TABLE avaliacoes 
      DROP CONSTRAINT IF EXISTS avaliacoes_numero_laudo_key
    `);
    console.log('   ‚úÖ Constraint removida\n');

    // 2. Adicionar index para performance (n√£o unique)
    console.log('2. Adicionando index (n√£o unique) para numero_laudo...');
    await query(`
      CREATE INDEX IF NOT EXISTS idx_avaliacoes_numero_laudo 
      ON avaliacoes(numero_laudo)
    `);
    console.log('   ‚úÖ Index criado\n');

    // 3. Adicionar index composto para buscar avalia√ß√µes por paciente e laudo
    console.log('3. Adicionando index composto paciente_id + numero_laudo...');
    await query(`
      CREATE INDEX IF NOT EXISTS idx_avaliacoes_paciente_laudo 
      ON avaliacoes(paciente_id, numero_laudo)
    `);
    console.log('   ‚úÖ Index composto criado\n');

    // 4. Adicionar index para ordena√ß√£o por data
    console.log('4. Adicionando index para data_aplicacao...');
    await query(`
      CREATE INDEX IF NOT EXISTS idx_avaliacoes_data_aplicacao 
      ON avaliacoes(data_aplicacao DESC)
    `);
    console.log('   ‚úÖ Index de data criado\n');

    console.log('üéâ Migration conclu√≠da com sucesso!\n');
    console.log('üìã Agora √© poss√≠vel ter m√∫ltiplas avalia√ß√µes com o mesmo n√∫mero de laudo');
    console.log('   Exemplo: LAU-2025-0013 pode ter:');
    console.log('   - Avalia√ß√£o 1: 17/10/2025 - Testes: Mem√≥ria + Aten√ß√£o');
    console.log('   - Avalia√ß√£o 2: 20/10/2025 - Testes: Mem√≥ria + Intelig√™ncia\n');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro na migration:', error);
    process.exit(1);
  }
}

removeLaudoUniqueConstraint();

