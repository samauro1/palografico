import React, { useState, useEffect, useMemo } from 'react';
import { useQuery } from 'react-query';
import { useSearchParams } from 'react-router-dom';
import { 
  Brain, 
  Eye, 
  Target, 
  MemoryStick, 
  Calculator,
  Navigation,
  FileText
} from 'lucide-react';
import { tabelasService, pacientesService } from '../services/api';
import LoadingSpinner from '../components/LoadingSpinner';

const Testes = () => {
  const [searchParams] = useSearchParams();
  const [selectedTest, setSelectedTest] = useState(null);
  const [testData, setTestData] = useState({});
  const [results, setResults] = useState(null);
  const [analysisType, setAnalysisType] = useState('anonymous');
  const [patientData, setPatientData] = useState({
    cpf: '',
    nome: '',
    numero_laudo: ''
  });
  const [avaliacaoData, setAvaliacaoData] = useState({
    data_avaliacao: new Date().toISOString().split('T')[0] // Data atual como padr√£o
  });
  const [foundPatient, setFoundPatient] = useState(null);
  const [searchingPatient, setSearchingPatient] = useState(false);
  
  // Estados espec√≠ficos do MIG: respostas e gabarito
  const QUESTIONS_COUNT = 28;
  const [migAnswers, setMigAnswers] = useState(Array(QUESTIONS_COUNT).fill(''));
  const [migAnswerKey, setMigAnswerKey] = useState(Array(QUESTIONS_COUNT).fill(''));
  const [autoCalcFromGabarito, setAutoCalcFromGabarito] = useState(true);
  const [migKeyEditMode, setMigKeyEditMode] = useState(false);

  // Estados espec√≠ficos do MEMORE (crivo): 30 itens total (A-F + 1-24)
  const MEMORE_TOTAL = 30; // inclui treino A..F (6) + 24 itens
  
  // Debug: Verificar se o arquivo est√° sendo carregado
  console.log('üîÑ Testes.js carregado - Layout MIG e MEMORE atualizados:', new Date().toLocaleTimeString());
  // Chave fixa do MEMORE (n√£o edit√°vel pelo usu√°rio)
  const memoreKeyVP = (() => {
    const key = Array(MEMORE_TOTAL).fill(false); // 30 itens: A-F + 1-24
    // Treino A-F: B, C, E s√£o VP (√≠ndices 1, 2, 4)
    key[1] = true; // B
    key[2] = true; // C  
    key[4] = true; // E
    // Teste 1-24: VP s√£o 2,3,4,6,8,10,12,14,15,18,20,22 (√≠ndices 6+1, 6+2, etc.)
    const vpItems = [2,3,4,6,8,10,12,14,15,18,20,22];
    vpItems.forEach(item => {
      key[5 + item] = true; // +5 porque A-F ocupam √≠ndices 0-5
    });
    return key;
  })(); // true = VP (deve marcar), false = VN (n√£o deve marcar)
  const [memoreMarks, setMemoreMarks] = useState(Array(MEMORE_TOTAL).fill(false)); // true = marcou (X)
  
  // Estado para tabela normativa selecionada
  const [selectedTable, setSelectedTable] = useState(null);

  // Contadores ao vivo do MEMORE (n√£o altera campos manuais)
  const memoreLive = useMemo(() => {
    if (selectedTest?.id !== 'memore') return null;
    const vp = memoreMarks.reduce((s, m, i) => s + (i >= 6 && memoreKeyVP[i] && m ? 1 : 0), 0);
    const vn = memoreMarks.reduce((s, m, i) => s + (i >= 6 && !memoreKeyVP[i] && !m ? 1 : 0), 0);
    const fn = memoreMarks.reduce((s, m, i) => s + (i >= 6 && memoreKeyVP[i] && !m ? 1 : 0), 0);
    const fp = memoreMarks.reduce((s, m, i) => s + (i >= 6 && !memoreKeyVP[i] && m ? 1 : 0), 0);
    const eb = (vp + vn) - (fn + fp);
    return { vp, vn, fn, fp, eb };
  }, [memoreMarks, memoreKeyVP, selectedTest?.id]);

  // Auto-sincronizar contadores do crivo com os campos manuais
  useEffect(() => {
    if (selectedTest?.id !== 'memore') return;
    if (!memoreLive) return;
    
    // S√≥ atualiza se os valores realmente mudaram
    setTestData(prev => {
      const newData = {
        vp: memoreLive.vp,
        vn: memoreLive.vn,
        fn: memoreLive.fn,
        fp: memoreLive.fp,
        eb: memoreLive.eb
      };
      
      // Verifica se os valores mudaram para evitar loop infinito
      if (prev.vp === newData.vp && prev.vn === newData.vn && 
          prev.fn === newData.fn && prev.fp === newData.fp && 
          prev.eb === newData.eb) {
        return prev;
      }
      
      return { ...prev, ...newData };
    });
  }, [memoreLive, selectedTest?.id]);

  // C√°lculo autom√°tico quando campos manuais mudam
  useEffect(() => {
    if (selectedTest?.id !== 'memore') return;
    
    const vp = Number(testData.vp) || 0;
    const vn = Number(testData.vn) || 0;
    const fn = Number(testData.fn) || 0;
    const fp = Number(testData.fp) || 0;
    
    // Calcular EB automaticamente
    const eb = (vp + vn) - (fn + fp);
    setTestData(prev => ({ ...prev, eb }));
  }, [testData.vp, testData.vn, testData.fn, testData.fp, selectedTest?.id]);

  const testes = useMemo(() => [
    {
      id: 'ac',
      nome: 'AC - Aten√ß√£o Concentrada',
      descricao: 'Avalia√ß√£o da capacidade de aten√ß√£o concentrada',
      icon: Target,
      color: 'bg-blue-500',
      campos: [
        { nome: 'acertos', tipo: 'number', label: 'Acertos', min: 0, max: 50 },
        { nome: 'erros', tipo: 'number', label: 'Erros', min: 0, max: 50 },
        { nome: 'omissoes', tipo: 'number', label: 'Omiss√µes', min: 0, max: 50 },
        { nome: 'escolaridade', tipo: 'select', label: 'Escolaridade', options: ['Ensino Fundamental', 'Ensino M√©dio', 'Ensino Superior'] }
      ]
    },
    {
      id: 'beta-iii',
      nome: 'BETA-III - Racioc√≠nio Matricial',
      descricao: 'Avalia√ß√£o do racioc√≠nio l√≥gico e matricial',
      icon: Brain,
      color: 'bg-purple-500',
      campos: [
        { nome: 'acertos', tipo: 'number', label: 'Acertos', min: 0, max: 25 }
      ]
    },
    {
      id: 'bpa2',
      nome: 'BPA-2 - Aten√ß√£o',
      descricao: 'Avalia√ß√£o das tr√™s modalidades de aten√ß√£o (sustentada, alternada, dividida)',
      icon: Eye,
      color: 'bg-green-500',
      campos: [
        { nome: 'acertos_sustentada', tipo: 'number', label: 'Acertos - Aten√ß√£o Sustentada', min: 0, max: 100 },
        { nome: 'erros_sustentada', tipo: 'number', label: 'Erros - Aten√ß√£o Sustentada', min: 0, max: 100 },
        { nome: 'omissoes_sustentada', tipo: 'number', label: 'Omiss√µes - Aten√ß√£o Sustentada', min: 0, max: 100 },
        { nome: 'acertos_alternada', tipo: 'number', label: 'Acertos - Aten√ß√£o Alternada', min: 0, max: 100 },
        { nome: 'erros_alternada', tipo: 'number', label: 'Erros - Aten√ß√£o Alternada', min: 0, max: 100 },
        { nome: 'omissoes_alternada', tipo: 'number', label: 'Omiss√µes - Aten√ß√£o Alternada', min: 0, max: 100 },
        { nome: 'acertos_dividida', tipo: 'number', label: 'Acertos - Aten√ß√£o Dividida', min: 0, max: 100 },
        { nome: 'erros_dividida', tipo: 'number', label: 'Erros - Aten√ß√£o Dividida', min: 0, max: 100 },
        { nome: 'omissoes_dividida', tipo: 'number', label: 'Omiss√µes - Aten√ß√£o Dividida', min: 0, max: 100 }
      ]
    },
    {
      id: 'rotas',
      nome: 'Rotas de Aten√ß√£o',
      descricao: 'Avalia√ß√£o das rotas de aten√ß√£o',
      icon: Navigation,
      color: 'bg-yellow-500',
      campos: [
        { nome: 'acertos_rota_a', tipo: 'number', label: 'Acertos - Rota A', min: 0, max: 50 },
        { nome: 'erros_rota_a', tipo: 'number', label: 'Erros - Rota A', min: 0, max: 50 },
        { nome: 'omissoes_rota_a', tipo: 'number', label: 'Omiss√µes - Rota A', min: 0, max: 50 },
        { nome: 'acertos_rota_d', tipo: 'number', label: 'Acertos - Rota D', min: 0, max: 50 },
        { nome: 'erros_rota_d', tipo: 'number', label: 'Erros - Rota D', min: 0, max: 50 },
        { nome: 'omissoes_rota_d', tipo: 'number', label: 'Omiss√µes - Rota D', min: 0, max: 50 },
        { nome: 'acertos_rota_c', tipo: 'number', label: 'Acertos - Rota C', min: 0, max: 50 },
        { nome: 'erros_rota_c', tipo: 'number', label: 'Erros - Rota C', min: 0, max: 50 },
        { nome: 'omissoes_rota_c', tipo: 'number', label: 'Omiss√µes - Rota C', min: 0, max: 50 }
      ]
    },
    {
      id: 'memore',
      nome: 'Memore - Mem√≥ria',
      descricao: 'Avalia√ß√£o da capacidade de mem√≥ria',
      icon: MemoryStick,
      color: 'bg-pink-500',
      campos: [
        { nome: 'vp', tipo: 'number', label: 'Verdadeiros Positivos', min: 0, max: 50 },
        { nome: 'vn', tipo: 'number', label: 'Verdadeiros Negativos', min: 0, max: 50 },
        { nome: 'fn', tipo: 'number', label: 'Falsos Negativos', min: 0, max: 50 },
        { nome: 'fp', tipo: 'number', label: 'Falsos Positivos', min: 0, max: 50 }
      ]
    },
    {
      id: 'mig',
      nome: 'MIG - Avalia√ß√£o Psicol√≥gica',
      descricao: 'Avalia√ß√£o psicol√≥gica geral',
      icon: Calculator,
      color: 'bg-indigo-500',
      campos: [
        { nome: 'tipo_avaliacao', tipo: 'select', label: 'Tipo de Avalia√ß√£o', options: ['Individual', 'Grupal'] },
        { nome: 'idade', tipo: 'number', label: 'Idade', min: 15, max: 64 },
        { nome: 'escolaridade', tipo: 'select', label: 'Escolaridade', options: ['Ensino Fundamental', 'Ensino M√©dio', 'Ensino Superior'] },
        { nome: 'acertos', tipo: 'number', label: 'Acertos', min: 0, max: 28 }
      ]
    },
    {
      id: 'mvt',
      nome: 'MVT - Mem√≥ria Visual para o Tr√¢nsito',
      descricao: 'Avalia√ß√£o da mem√≥ria visual relacionada ao tr√¢nsito',
      icon: Eye,
      color: 'bg-teal-500',
      campos: [
        { nome: 'acertos', tipo: 'number', label: 'Acertos', min: 0, max: 50 },
        { nome: 'erros', tipo: 'number', label: 'Erros', min: 0, max: 50 },
        { nome: 'omissao', tipo: 'number', label: 'Omiss√£o', min: 0, max: 50 }
      ]
    },
    {
      id: 'r1',
      nome: 'R-1 - Racioc√≠nio',
      descricao: 'Avalia√ß√£o do racioc√≠nio geral',
      icon: Brain,
      color: 'bg-orange-500',
      campos: [
        { nome: 'acertos', tipo: 'number', label: 'Acertos', min: 0, max: 50 }
      ]
    },
    {
      id: 'palografico',
      nome: 'Palogr√°fico',
      descricao: 'Avalia√ß√£o da personalidade atrav√©s da escrita',
      icon: FileText,
      color: 'bg-gray-500',
      campos: [
        { nome: 'produtividade', tipo: 'number', label: 'Produtividade', min: 0, max: 1000 },
        { nome: 'nor', tipo: 'number', label: 'NOR', min: 0, max: 100, step: 0.01 },
        { nome: 'distancia_media', tipo: 'number', label: 'Dist√¢ncia M√©dia', min: 0, max: 100, step: 0.01 },
        { nome: 'media_tamanho_palos', tipo: 'number', label: 'M√©dia Tamanho Palos', min: 0, max: 100, step: 0.01 },
        { nome: 'impulsividade', tipo: 'number', label: 'Impulsividade', min: 0, max: 100, step: 0.01 },
        { nome: 'media_distancia_linhas', tipo: 'number', label: 'M√©dia Dist√¢ncia Linhas', min: 0, max: 100, step: 0.01 },
        { nome: 'media_margem_esquerda', tipo: 'number', label: 'M√©dia Margem Esquerda', min: 0, max: 100, step: 0.01 },
        { nome: 'media_margem_direita', tipo: 'number', label: 'M√©dia Margem Direita', min: 0, max: 100, step: 0.01 },
        { nome: 'media_margem_superior', tipo: 'number', label: 'M√©dia Margem Superior', min: 0, max: 100, step: 0.01 },
        { nome: 'porcentagem_ganchos', tipo: 'number', label: 'Porcentagem Ganchos', min: 0, max: 100, step: 0.01 },
        { nome: 'media_inclinacao', tipo: 'number', label: 'M√©dia Inclina√ß√£o', min: 0, max: 100, step: 0.01 },
        { nome: 'media_direcao_linhas', tipo: 'number', label: 'M√©dia Dire√ß√£o Linhas', min: 0, max: 100, step: 0.01 },
        { nome: 'total_emotividade', tipo: 'number', label: 'Total Emotividade', min: 0, max: 100 }
      ]
    }
  ], []);

  // Pr√©-selecionar teste e dados do paciente se vier da URL
  useEffect(() => {
    const initializeFromURL = async () => {
      const testParam = searchParams.get('test');
      const patientId = searchParams.get('patient_id');
      const patientName = searchParams.get('patient_name');
      const patientCpf = searchParams.get('patient_cpf');
      const analysisTypeParam = searchParams.get('analysis_type');
      
      if (testParam) {
        const test = testes.find(t => t.id === testParam);
        if (test) {
          setSelectedTest(test);
          
          // Configurar tipo de an√°lise
          if (analysisTypeParam) {
            setAnalysisType(analysisTypeParam);
          }
          
          // Se h√° dados do paciente, configurar
          if (patientId && patientName && patientCpf) {
            // Buscar dados completos do paciente
            try {
              const response = await pacientesService.list({ search: patientCpf, limit: 1 });
              const pacientes = response.data.data.pacientes || [];
              if (pacientes.length > 0) {
                setFoundPatient(pacientes[0]);
                setPatientData({
                  cpf: patientCpf,
                  nome: patientName,
                  numero_laudo: `LAU-${new Date().getFullYear()}-${String(pacientes[0].id).padStart(3, '0')}`
                });
                // Pr√©-carregar escolaridade do paciente
                setTestData(prev => ({
                  ...prev,
                  escolaridade: pacientes[0].escolaridade
                }));
              } else {
                // Fallback se n√£o encontrar
                const patientData = {
                  id: parseInt(patientId),
                  nome: patientName,
                  cpf: patientCpf
                };
                setFoundPatient(patientData);
                setPatientData({
                  cpf: patientCpf,
                  nome: patientName,
                  numero_laudo: ''
                });
              }
            } catch (error) {
              console.error('Erro ao buscar dados completos do paciente:', error);
              // Fallback se der erro
              const patientData = {
                id: parseInt(patientId),
                nome: patientName,
                cpf: patientCpf
              };
              setFoundPatient(patientData);
              setPatientData({
                cpf: patientCpf,
                nome: patientName,
                numero_laudo: ''
              });
            }
          }
        }
      }
    };

    initializeFromURL();
  }, [searchParams, testes]);

  const { data: tabelasNormativas, isLoading } = useQuery(
    'tabelas-normativas',
    () => tabelasService.list(),
    {
      select: (data) => data.data.tabelas?.filter(tabela => 
        tabela.tipo === 'bpa2' || tabela.tipo === 'rotas' || tabela.tipo === 'mig' || tabela.tipo === 'memore'
      ) || []
    }
  );

  // Sugerir tabela automaticamente quando paciente √© encontrado
  useEffect(() => {
    if ((selectedTest?.id === 'bpa2' || selectedTest?.id === 'rotas' || selectedTest?.id === 'mig' || selectedTest?.id === 'memore') && foundPatient && tabelasNormativas && !selectedTable) {
      const tabelaSugerida = sugerirTabela(foundPatient, tabelasNormativas, selectedTest?.id);
      if (tabelaSugerida) {
        setSelectedTable(tabelaSugerida);
      }
    }
  }, [foundPatient, tabelasNormativas, selectedTest, selectedTable]);

  // Para MEMORE, definir tabela padr√£o quando o teste √© selecionado
  useEffect(() => {
    if (selectedTest?.id === 'memore' && tabelasNormativas && !selectedTable) {
      // Tentar encontrar tabela de tr√¢nsito por escolaridade primeiro
      const transitoEscolaridade = tabelasNormativas.find(t => 
        t.tipo === 'memore' && 
        (t.nome.includes('Tr√¢nsito') || t.nome.includes('transito')) && 
        t.criterio === 'Escolaridade'
      );
      
      if (transitoEscolaridade) {
        setSelectedTable(transitoEscolaridade.id);
      } else {
        // Fallback: usar qualquer tabela MEMORE dispon√≠vel
        const memoreQualquer = tabelasNormativas.find(t => t.tipo === 'memore');
        if (memoreQualquer) {
          setSelectedTable(memoreQualquer.id);
        }
      }
    }
  }, [selectedTest?.id, tabelasNormativas, selectedTable]);

  const handleTestSelect = (teste) => {
    setSelectedTest(teste);
    setTestData({});
    setResults(null);
    setSelectedTable(null); // Reset da tabela selecionada
    setAnalysisType('anonymous');
    setPatientData({ cpf: '', nome: '', numero_laudo: '' });
    setFoundPatient(null);
    setSearchingPatient(false);
    // Reset estados MIG
    setMigAnswers(Array(QUESTIONS_COUNT).fill(''));
    setMigAnswerKey(Array(QUESTIONS_COUNT).fill(''));
    setAutoCalcFromGabarito(true);
  };

  const handleInputChange = (field, value) => {
    setTestData({
      ...testData,
      [field]: value
    });
  };

  const handlePatientDataChange = async (field, value) => {
    const newPatientData = {
      ...patientData,
      [field]: value
    };
    setPatientData(newPatientData);
    
    // Buscar paciente se pelo menos um campo tem valor
    if (value.trim() && (newPatientData.cpf || newPatientData.nome || newPatientData.numero_laudo)) {
      await searchPatient(newPatientData);
    } else {
      setFoundPatient(null);
    }
  };

  const searchPatient = async (data) => {
    setSearchingPatient(true);
    try {
      // Buscar por CPF
      if (data.cpf && data.cpf.length >= 11) {
        const formattedCPF = formatCPF(data.cpf);
        const response = await pacientesService.list({ search: formattedCPF, limit: 1 });
        const pacientes = response.data.data.pacientes || [];
        if (pacientes.length > 0) {
          setFoundPatient(pacientes[0]);
          // Pr√©-carregar todos os dados do paciente
          setPatientData({
            cpf: pacientes[0].cpf,
            nome: pacientes[0].nome,
            numero_laudo: `LAU-${new Date().getFullYear()}-${String(pacientes[0].id).padStart(3, '0')}`
          });
          setTestData(prev => ({
            ...prev,
            escolaridade: pacientes[0].escolaridade
          }));
          return;
        }
      }
      
      // Buscar por nome
      if (data.nome && data.nome.length >= 3) {
        const response = await pacientesService.list({ search: data.nome, limit: 1 });
        const pacientes = response.data.data.pacientes || [];
        if (pacientes.length > 0) {
          setFoundPatient(pacientes[0]);
          // Pr√©-carregar todos os dados do paciente
          setPatientData({
            cpf: pacientes[0].cpf,
            nome: pacientes[0].nome,
            numero_laudo: `LAU-${new Date().getFullYear()}-${String(pacientes[0].id).padStart(3, '0')}`
          });
          setTestData(prev => ({
            ...prev,
            escolaridade: pacientes[0].escolaridade
          }));
          return;
        }
      }
      
      setFoundPatient(null);
    } catch (error) {
      console.error('Erro ao buscar paciente:', error);
      setFoundPatient(null);
    } finally {
      setSearchingPatient(false);
    }
  };

  const formatCPF = (cpf) => {
    return cpf.replace(/\D/g, '').replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
  };

  // Fun√ß√£o para sugerir a melhor tabela normativa baseada no paciente
  const sugerirTabela = (paciente, tabelas, testId) => {
    if (!paciente || !tabelas) return null;
    
    const escolaridade = paciente.escolaridade;
    
    // Para MEMORE, priorizar tabelas de tr√¢nsito
    if (testId === 'memore') {
      // 1. Tentar tabela de tr√¢nsito por escolaridade
      if (escolaridade) {
        const transitoEscolaridade = tabelas.find(t => 
          (t.nome.includes('Tr√¢nsito') || t.nome.includes('transito') || t.nome.includes('CNH')) && 
          t.criterio === 'Escolaridade'
        );
        if (transitoEscolaridade) return transitoEscolaridade.id;
      }
      
      // 2. Tentar tabela de tr√¢nsito por idade
      const transitoIdade = tabelas.find(t => 
        (t.nome.includes('Tr√¢nsito') || t.nome.includes('transito') || t.nome.includes('CNH')) && 
        t.criterio === 'Idade'
      );
      if (transitoIdade) return transitoIdade.id;
      
      // 3. Tentar qualquer tabela de tr√¢nsito
      const transitoQualquer = tabelas.find(t => 
        t.nome.includes('Tr√¢nsito') || t.nome.includes('transito') || t.nome.includes('CNH')
      );
      if (transitoQualquer) return transitoQualquer.id;
      
      // 4. Fallback: usar tabela MEMORE de Tr√¢nsito por nome
      const memorePadrao = tabelas.find(t => 
        t.tipo === 'memore' && (t.nome.includes('Tr√¢nsito') || t.nome.includes('transito'))
      );
      if (memorePadrao) return memorePadrao.id;
    }
    
    // Para outros testes, manter l√≥gica original
    // Prioridade: S√£o Paulo > Regi√£o Sudeste > Brasil
    // Crit√©rio: Escolaridade > Idade
    
    // 1. Tentar S√£o Paulo por escolaridade
    if (escolaridade) {
      const saoPauloEscolaridade = tabelas.find(t => 
        t.nome.includes('S√£o Paulo') && 
        t.criterio === 'Escolaridade'
      );
      if (saoPauloEscolaridade) return saoPauloEscolaridade.id;
    }
    
    // 2. Tentar S√£o Paulo por idade
    const saoPauloIdade = tabelas.find(t => 
      t.nome.includes('S√£o Paulo') && 
      t.criterio === 'Idade'
    );
    if (saoPauloIdade) return saoPauloIdade.id;
    
    // 3. Tentar Regi√£o Sudeste por escolaridade
    if (escolaridade) {
      const sudesteEscolaridade = tabelas.find(t => 
        t.nome.includes('Regi√£o Sudeste') && 
        t.criterio === 'Escolaridade'
      );
      if (sudesteEscolaridade) return sudesteEscolaridade.id;
    }
    
    // 4. Tentar Regi√£o Sudeste por idade
    const sudesteIdade = tabelas.find(t => 
      t.nome.includes('Regi√£o Sudeste') && 
      t.criterio === 'Idade'
    );
    if (sudesteIdade) return sudesteIdade.id;
    
    // 5. Tentar Brasil por escolaridade
    if (escolaridade) {
      const brasilEscolaridade = tabelas.find(t => 
        t.nome.includes('Brasil') && 
        t.criterio === 'Escolaridade'
      );
      if (brasilEscolaridade) return brasilEscolaridade.id;
    }
    
    // 6. Fallback: Brasil por idade
    const brasilIdade = tabelas.find(t => 
      t.nome.includes('Brasil') && 
      t.criterio === 'Idade'
    );
    if (brasilIdade) return brasilIdade.id;
    
    return null;
  };


  const migCorrectCount = useMemo(() => {
    if (selectedTest?.id !== 'mig') return 0;
    return migAnswers.reduce((sum, ans, idx) => {
      const key = migAnswerKey[idx];
      if (!ans || !key) return sum;
      return sum + (ans === key ? 1 : 0);
    }, 0);
  }, [migAnswers, migAnswerKey, selectedTest]);

  // Fun√ß√£o para determinar a cor do input baseada na resposta
  const getAnswerColor = (idx) => {
    const answer = migAnswers[idx];
    const key = migAnswerKey[idx];
    
    if (!answer || !key) return 'border-gray-300 bg-white';
    
    if (answer === key) {
      return 'border-green-500 bg-green-50 text-green-800';
    } else {
      return 'border-orange-500 bg-orange-50 text-orange-800';
    }
  };

  // Fun√ß√£o para obter o √≠cone de status da resposta
  const getAnswerIcon = (idx) => {
    const answer = migAnswers[idx];
    const key = migAnswerKey[idx];
    
    if (!answer || !key) return '';
    
    if (answer === key) {
      return '‚úì';
    } else {
      return '‚úó';
    }
  };


  // --- L√≥gica MEMORE ---
  const toggleMemoreMark = (idx) => {
    const updated = [...memoreMarks];
    updated[idx] = !updated[idx];
    setMemoreMarks(updated);
    
    // Calcular automaticamente os contadores quando o crivo √© marcado
    if (selectedTest?.id === 'memore') {
      const vp = updated.reduce((s, m, i) => s + (i >= 6 && memoreKeyVP[i] && m ? 1 : 0), 0);
      const vn = updated.reduce((s, m, i) => s + (i >= 6 && !memoreKeyVP[i] && !m ? 1 : 0), 0);
      const fn = updated.reduce((s, m, i) => s + (i >= 6 && memoreKeyVP[i] && !m ? 1 : 0), 0);
      const fp = updated.reduce((s, m, i) => s + (i >= 6 && !memoreKeyVP[i] && m ? 1 : 0), 0);
      const eb = (vp + vn) - (fn + fp);
      
      setTestData(prev => ({ ...prev, vp, vn, fn, fp, eb }));
    }
  };







  const clearMemoreMarks = () => setMemoreMarks(Array(MEMORE_TOTAL).fill(false));


  // Sincroniza "acertos" do MIG com o gabarito
  useEffect(() => {
    if (selectedTest?.id === 'mig') {
      setTestData(prev => ({ ...prev, acertos: migCorrectCount }));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [migCorrectCount, selectedTest?.id]);

  // Dispara c√°lculo autom√°tico quando poss√≠vel
  useEffect(() => {
    if (selectedTest?.id !== 'mig' || !autoCalcFromGabarito) return;
    const ready = selectedTable && (testData?.tipo_avaliacao || '') && (testData?.idade || foundPatient?.idade) && (testData?.escolaridade || foundPatient?.escolaridade);
    if (!ready) return;

    const timer = setTimeout(() => {
      handleCalculate();
    }, 400);
    return () => clearTimeout(timer);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [migCorrectCount, selectedTable, testData?.tipo_avaliacao, testData?.idade, testData?.escolaridade, foundPatient, selectedTest?.id, autoCalcFromGabarito]);

  const handleCalculate = async () => {
    if (!selectedTest) return;

    try {
      // Validar sele√ß√£o de tabela para BPA-2, Rotas, MIG e MEMORE
      if ((selectedTest.id === 'bpa2' || selectedTest.id === 'rotas' || selectedTest.id === 'mig' || selectedTest.id === 'memore') && !selectedTable) {
        alert(`Por favor, selecione uma tabela normativa para o ${selectedTest.nome}`);
        return;
      }
      
      // Priorizar escolaridade do paciente encontrado
      const escolaridade = foundPatient?.escolaridade || testData.escolaridade;
      
      // Converter strings vazias para 0 para campos num√©ricos
      const dadosLimpos = {};
      Object.keys(testData).forEach(key => {
        const value = testData[key];
        if (value === '' || value === null || value === undefined) {
          dadosLimpos[key] = 0;
        } else {
          dadosLimpos[key] = isNaN(value) ? value : Number(value);
        }
      });
      
      const dados = {
        ...dadosLimpos,
        escolaridade: escolaridade,
        // Incluir tabela normativa selecionada para BPA-2, Rotas, MIG e MEMORE
        ...((selectedTest.id === 'bpa2' || selectedTest.id === 'rotas' || selectedTest.id === 'mig' || selectedTest.id === 'memore') && selectedTable && { tabela_id: selectedTable }),
        // Incluir dados da avalia√ß√£o se for vinculada
        analysisType: analysisType,
        ...(analysisType === 'linked' && foundPatient && {
          patientData: {
            foundPatient: foundPatient,
            numero_laudo: patientData.numero_laudo,
            data_avaliacao: avaliacaoData.data_avaliacao
          }
        })
      };

      // Garantir campos do MEMORE sempre presentes como n√∫meros
      if (selectedTest.id === 'memore') {
        dados.vp = Number(dados.vp ?? 0);
        dados.vn = Number(dados.vn ?? 0);
        dados.fn = Number(dados.fn ?? 0);
        dados.fp = Number(dados.fp ?? 0);
        // N√£o enviar EB ao backend; ele ser√° calculado l√°
        if ('eb' in dados) delete dados.eb;
      }

      console.log('üîç Dados enviados para c√°lculo:', dados);
      console.log('üîç Paciente encontrado:', foundPatient);

      const response = await tabelasService.calculate(selectedTest.id, dados);
      console.log('üîç Resposta completa da API:', response);
      console.log('üîç Dados dos resultados:', response.data);
      console.log('üîç Resultado dentro de data:', response.data?.resultado);
      setResults(response.data?.resultado || response.data);

      // Se for an√°lise vinculada e encontrou paciente, salvar resultado
      if (analysisType === 'linked' && foundPatient) {
        // O backend j√° salva automaticamente quando analysisType √© 'linked'
        alert('‚úÖ Resultado salvo com sucesso na base de dados!');
      }
    } catch (error) {
      console.error('Erro ao calcular:', error);
      alert('Erro ao calcular resultado: ' + (error.response?.data?.error || error.message));
    }
  };

  if (isLoading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-2">Testes Psicol√≥gicos</h1>
        <p className="text-gray-600">Selecione um teste para aplicar e calcular resultados</p>
      </div>

      {!selectedTest ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 animate-fade-in">
          {testes.map((teste, index) => {
            const IconComponent = teste.icon;
            return (
              <div
                key={teste.id}
                onClick={() => handleTestSelect(teste)}
                style={{ animationDelay: `${index * 0.1}s` }}
                className="bg-white rounded-xl shadow-soft p-6 cursor-pointer hover:shadow-hover transition-all duration-300 border border-gray-200 hover:border-primary-300 transform hover:scale-105 hover:-translate-y-1 animate-scale-in"
              >
                <div className="flex items-center mb-4">
                  <div className={`p-4 rounded-xl ${teste.color} text-white mr-4 shadow-md group-hover:shadow-lg transition-shadow duration-300`}>
                    <IconComponent size={28} />
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-gray-900 mb-1">{teste.nome}</h3>
                    <p className="text-sm text-gray-600">{teste.descricao}</p>
                  </div>
                </div>
                <div className="mt-4 pt-4 border-t border-gray-100">
                  <span className="text-xs text-primary-600 font-medium hover:text-primary-700">
                    Clique para aplicar ‚Üí
                  </span>
                </div>
              </div>
            );
          })}
        </div>
      ) : (
        <div className="bg-white rounded-xl shadow-soft p-6 animate-slide-in">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center">
              <div className={`p-4 rounded-xl ${selectedTest.color} text-white mr-4 shadow-md`}>
                <selectedTest.icon size={32} />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-gray-900">{selectedTest.nome}</h2>
                <p className="text-gray-600 mt-1">{selectedTest.descricao}</p>
              </div>
            </div>
            <button
              onClick={() => setSelectedTest(null)}
              className="px-6 py-3 text-gray-700 hover:text-gray-900 border-2 border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 font-medium flex items-center gap-2"
            >
              ‚Üê Voltar
            </button>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Tipo de An√°lise</h3>
              <div className="space-y-3 mb-6">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="analysisType"
                    value="anonymous"
                    checked={analysisType === 'anonymous'}
                    onChange={(e) => setAnalysisType(e.target.value)}
                    className="mr-3"
                  />
                  <div>
                    <div className="font-medium">An√°lise An√¥nima</div>
                    <div className="text-sm text-gray-600">Calcular resultado sem vincular a paciente</div>
                  </div>
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="analysisType"
                    value="linked"
                    checked={analysisType === 'linked'}
                    onChange={(e) => setAnalysisType(e.target.value)}
                    className="mr-3"
                  />
                  <div>
                    <div className="font-medium">An√°lise Vinculada</div>
                    <div className="text-sm text-gray-600">Vincular resultado a um paciente espec√≠fico</div>
                  </div>
                </label>
              </div>

              {analysisType === 'linked' && (
                <div className="mb-6">
                  <h4 className="font-medium text-gray-900 mb-3">Dados do Paciente</h4>
                  
                  {foundPatient && searchParams.get('patient_id') && (
                    <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-md">
                      <p className="text-sm text-green-800">
                        <strong>Paciente pr√©-selecionado da Nova Avalia√ß√£o.</strong> Os dados j√° est√£o configurados.
                      </p>
                    </div>
                  )}

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">CPF</label>
                      <input
                        type="text"
                        value={patientData.cpf}
                        onChange={(e) => handlePatientDataChange('cpf', e.target.value)}
                        placeholder="000.000.000-00"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Nome</label>
                      <input
                        type="text"
                        value={patientData.nome}
                        onChange={(e) => handlePatientDataChange('nome', e.target.value)}
                        placeholder="Nome completo do paciente"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">N√∫mero do Laudo</label>
                      <input
                        type="text"
                        value={patientData.numero_laudo}
                        onChange={(e) => handlePatientDataChange('numero_laudo', e.target.value)}
                        placeholder="Ex: LAU-2024-001"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Data da Avalia√ß√£o</label>
                      <input
                        type="date"
                        value={avaliacaoData.data_avaliacao}
                        onChange={(e) => setAvaliacaoData(prev => ({ ...prev, data_avaliacao: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>

                  {searchingPatient && (
                    <div className="mt-3 text-sm text-blue-600">Buscando paciente...</div>
                  )}

                  {foundPatient && (
                    <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-md">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-green-800">Paciente encontrado:</h4>
                          <p className="text-green-700">
                            <strong>Nome:</strong> {foundPatient.nome} | 
                            <strong> CPF:</strong> {foundPatient.cpf} | 
                            <strong> Idade:</strong> {foundPatient.idade} anos | 
                            <strong> Escolaridade:</strong> {foundPatient.escolaridade}
                          </p>
                        </div>
                        <div className="text-green-600">
                          <span className="text-lg">‚úì</span>
                          <span className="ml-1 text-sm">Vinculado</span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}

              <h3 className="text-lg font-semibold text-gray-900 mb-4">Dados do Teste</h3>
              
              {(selectedTest.id === 'bpa2' || selectedTest.id === 'rotas' || selectedTest.id === 'mig' || selectedTest.id === 'memore') ? (
                // Sele√ß√£o de tabela normativa para BPA-2 e Rotas
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìä Tabela Normativa
                  </label>
                  <select
                    value={selectedTable || ''}
                    onChange={(e) => setSelectedTable(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione uma tabela normativa...</option>
                    {tabelasNormativas?.filter(tabela => {
                      if (tabela.tipo !== selectedTest.id) return false;
                      // Para MEMORE, remover tabela "Memore-Mem√≥ria" e ordenar de 7 a 10
                      if (selectedTest.id === 'memore') {
                        const nome = tabela.nome || '';
                        // Remover tabela "Memore-Mem√≥ria"
                        if (nome.includes('Memore-Mem√≥ria') || nome.includes('Mem√≥ria')) return false;
                        // Manter apenas tabelas 7, 8, 9, 10
                        return nome.includes('Tr√¢nsito') || nome.includes('transito') || 
                               nome.includes('Escolaridade') || nome.includes('Idade') || 
                               nome.includes('Geral');
                      }
                      return true;
                    }).sort((a, b) => {
                      // Ordenar tabelas MEMORE: 7 (Tr√¢nsito), 8 (Escolaridade), 9 (Idade), 10 (Geral)
                      if (selectedTest.id === 'memore') {
                        const getTableNumber = (nome) => {
                          if (nome.includes('Tr√¢nsito') || nome.includes('transito')) return 7;
                          if (nome.includes('Escolaridade')) return 8;
                          if (nome.includes('Idade')) return 9;
                          if (nome.includes('Geral')) return 10;
                          return 99;
                        };
                        return getTableNumber(a.nome) - getTableNumber(b.nome);
                      }
                      return a.nome.localeCompare(b.nome);
                    }).map((tabela) => (
                      <option key={tabela.id} value={tabela.id}>
                        {tabela.nome} {tabela.criterio && `(${tabela.criterio})`} {selectedTest.id === 'memore' ? (() => {
                          const n = tabela.nome || '';
                          if (n.includes('Tr√¢nsito') || n.includes('transito')) return '‚Äî Tabela 7';
                          if (n.includes('Escolaridade')) return '‚Äî Tabela 8';
                          if (n.includes('Idade')) return '‚Äî Tabela 9';
                          if (n.includes('Geral')) return '‚Äî Tabela 10';
                          return '';
                        })() : ''}
                      </option>
                    ))}
                  </select>
                  {selectedTable && (
                    <div className="mt-2 p-3 bg-green-50 border border-green-200 rounded-md">
                      <p className="text-sm text-green-800 font-medium">
                        ‚úÖ Tabela selecionada: {(() => {
                          const tsel = tabelasNormativas?.find(t => t.id === parseInt(selectedTable));
                          if (!tsel) return '';
                          const base = tsel.nome;
                          const sufixo = selectedTest.id === 'memore'
                            ? (tsel.nome.includes('Tr√¢nsito') ? ' ‚Äî Tabela 7'
                              : (tsel.nome.includes('Escolaridade') && !tsel.nome.includes('Tr√¢nsito') ? ' ‚Äî Tabela 8'
                                : (tsel.nome.includes('Idade') ? ' ‚Äî Tabela 9'
                                  : (tsel.nome.includes('Geral') ? ' ‚Äî Tabela 10' : ''))))
                            : '';
                          return base + sufixo;
                        })()}
                      </p>
                      {tabelasNormativas?.find(t => t.id === parseInt(selectedTable))?.descricao && (
                        <p className="text-xs text-green-600 mt-1">
                          {tabelasNormativas?.find(t => t.id === parseInt(selectedTable))?.descricao}
                        </p>
                      )}
                      {foundPatient && (
                        <p className="text-xs text-blue-600 mt-1">
                          ü§ñ Sugerida automaticamente baseada no paciente encontrado
                        </p>
                      )}
                    </div>
                  )}
                  {foundPatient && !selectedTable && (
                    <div className="mt-2 p-3 bg-blue-50 border border-blue-200 rounded-md">
                      <p className="text-sm text-blue-800 mb-2">
                        ü§ñ Sugest√£o autom√°tica dispon√≠vel baseada no paciente
                      </p>
                      <button
                        type="button"
                        onClick={() => {
                          const tabelaSugerida = sugerirTabela(foundPatient, tabelasNormativas, selectedTest?.id);
                          if (tabelaSugerida) {
                            setSelectedTable(tabelaSugerida);
                          }
                        }}
                        className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors"
                      >
                        Aplicar Sugest√£o
                      </button>
                    </div>
                  )}
                  <div className="mt-2 text-xs text-gray-500">
                    üí° <strong>Recomenda√ß√£o:</strong> Para S√£o Paulo, use as tabelas espec√≠ficas do estado. 
                    Para outros estados, use as tabelas da regi√£o ou do Brasil.
                  </div>
                </div>
              ) : null}
              
              {selectedTest.id === 'bpa2' ? (
                // Layout especial para BPA-2 com colunas
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    {/* Aten√ß√£o Sustentada */}
                    <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                      <h4 className="text-lg font-semibold text-blue-800 mb-4 text-center">
                        Aten√ß√£o Sustentada
                      </h4>
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Acertos
                          </label>
                          <input
                            type="number"
                            value={testData.acertos_sustentada || ''}
                            onChange={(e) => handleInputChange('acertos_sustentada', e.target.value)}
                            min={0}
                            max={100}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Acertos"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Erros
                          </label>
                          <input
                            type="number"
                            value={testData.erros_sustentada || ''}
                            onChange={(e) => handleInputChange('erros_sustentada', e.target.value)}
                            min={0}
                            max={100}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Erros"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Omiss√µes
                          </label>
                          <input
                            type="number"
                            value={testData.omissoes_sustentada || ''}
                            onChange={(e) => handleInputChange('omissoes_sustentada', e.target.value)}
                            min={0}
                            max={100}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Omiss√µes"
                          />
                        </div>
                      </div>
                    </div>

                    {/* Aten√ß√£o Alternada */}
                    <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                      <h4 className="text-lg font-semibold text-green-800 mb-4 text-center">
                        Aten√ß√£o Alternada
                      </h4>
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Acertos
                          </label>
                          <input
                            type="number"
                            value={testData.acertos_alternada || ''}
                            onChange={(e) => handleInputChange('acertos_alternada', e.target.value)}
                            min={0}
                            max={100}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                            placeholder="Acertos"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Erros
                          </label>
                          <input
                            type="number"
                            value={testData.erros_alternada || ''}
                            onChange={(e) => handleInputChange('erros_alternada', e.target.value)}
                            min={0}
                            max={100}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                            placeholder="Erros"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Omiss√µes
                          </label>
                          <input
                            type="number"
                            value={testData.omissoes_alternada || ''}
                            onChange={(e) => handleInputChange('omissoes_alternada', e.target.value)}
                            min={0}
                            max={100}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                            placeholder="Omiss√µes"
                          />
                        </div>
                      </div>
                    </div>

                    {/* Aten√ß√£o Dividida */}
                    <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                      <h4 className="text-lg font-semibold text-purple-800 mb-4 text-center">
                        Aten√ß√£o Dividida
                      </h4>
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Acertos
                          </label>
                          <input
                            type="number"
                            value={testData.acertos_dividida || ''}
                            onChange={(e) => handleInputChange('acertos_dividida', e.target.value)}
                            min={0}
                            max={100}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                            placeholder="Acertos"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Erros
                          </label>
                          <input
                            type="number"
                            value={testData.erros_dividida || ''}
                            onChange={(e) => handleInputChange('erros_dividida', e.target.value)}
                            min={0}
                            max={100}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                            placeholder="Erros"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Omiss√µes
                          </label>
                          <input
                            type="number"
                            value={testData.omissoes_dividida || ''}
                            onChange={(e) => handleInputChange('omissoes_dividida', e.target.value)}
                            min={0}
                            max={100}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                            placeholder="Omiss√µes"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Resumo da Aten√ß√£o Geral */}
                  <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                    <h4 className="text-lg font-semibold text-gray-800 mb-2 text-center">
                      üìä Aten√ß√£o Geral (M√©dia das Tr√™s Modalidades)
                    </h4>
                    <p className="text-sm text-gray-600 text-center">
                      A aten√ß√£o geral ser√° calculada automaticamente como a m√©dia dos resultados das tr√™s modalidades
                    </p>
                  </div>
                </div>
              ) : selectedTest.id === 'rotas' ? (
                // Layout especial para Rotas de Aten√ß√£o - campos organizados por rota
                <div className="space-y-6">
                  {/* Rota A - Aten√ß√£o Alternada */}
                  <div className="bg-blue-50 border-2 border-blue-200 rounded-xl p-6">
                    <div className="text-center mb-4">
                      <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-2">
                        <span className="text-white font-bold text-lg">A</span>
                      </div>
                      <h4 className="text-lg font-bold text-blue-800">Rota A - Aten√ß√£o Alternada</h4>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-blue-700 mb-1">
                          Acertos
                        </label>
                        <input
                          type="number"
                          value={testData.acertos_rota_a || ''}
                          onChange={(e) => handleInputChange('acertos_rota_a', e.target.value)}
                          min="0"
                          max="50"
                          className="w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-blue-700 mb-1">
                          Erros
                        </label>
                        <input
                          type="number"
                          value={testData.erros_rota_a || ''}
                          onChange={(e) => handleInputChange('erros_rota_a', e.target.value)}
                          min="0"
                          max="50"
                          className="w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-blue-700 mb-1">
                          Omiss√µes
                        </label>
                        <input
                          type="number"
                          value={testData.omissoes_rota_a || ''}
                          onChange={(e) => handleInputChange('omissoes_rota_a', e.target.value)}
                          min="0"
                          max="50"
                          className="w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Rota D - Aten√ß√£o Dividida */}
                  <div className="bg-green-50 border-2 border-green-200 rounded-xl p-6">
                    <div className="text-center mb-4">
                      <div className="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-2">
                        <span className="text-white font-bold text-lg">D</span>
                      </div>
                      <h4 className="text-lg font-bold text-green-800">Rota D - Aten√ß√£o Dividida</h4>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-green-700 mb-1">
                          Acertos
                        </label>
                        <input
                          type="number"
                          value={testData.acertos_rota_d || ''}
                          onChange={(e) => handleInputChange('acertos_rota_d', e.target.value)}
                          min="0"
                          max="50"
                          className="w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-green-700 mb-1">
                          Erros
                        </label>
                        <input
                          type="number"
                          value={testData.erros_rota_d || ''}
                          onChange={(e) => handleInputChange('erros_rota_d', e.target.value)}
                          min="0"
                          max="50"
                          className="w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-green-700 mb-1">
                          Omiss√µes
                        </label>
                        <input
                          type="number"
                          value={testData.omissoes_rota_d || ''}
                          onChange={(e) => handleInputChange('omissoes_rota_d', e.target.value)}
                          min="0"
                          max="50"
                          className="w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Rota C - Aten√ß√£o Concentrada */}
                  <div className="bg-purple-50 border-2 border-purple-200 rounded-xl p-6">
                    <div className="text-center mb-4">
                      <div className="w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-2">
                        <span className="text-white font-bold text-lg">C</span>
                      </div>
                      <h4 className="text-lg font-bold text-purple-800">Rota C - Aten√ß√£o Concentrada</h4>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-purple-700 mb-1">
                          Acertos
                        </label>
                        <input
                          type="number"
                          value={testData.acertos_rota_c || ''}
                          onChange={(e) => handleInputChange('acertos_rota_c', e.target.value)}
                          min="0"
                          max="50"
                          className="w-full px-3 py-2 border border-purple-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-purple-700 mb-1">
                          Erros
                        </label>
                        <input
                          type="number"
                          value={testData.erros_rota_c || ''}
                          onChange={(e) => handleInputChange('erros_rota_c', e.target.value)}
                          min="0"
                          max="50"
                          className="w-full px-3 py-2 border border-purple-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-purple-700 mb-1">
                          Omiss√µes
                        </label>
                        <input
                          type="number"
                          value={testData.omissoes_rota_c || ''}
                          onChange={(e) => handleInputChange('omissoes_rota_c', e.target.value)}
                          min="0"
                          max="50"
                          className="w-full px-3 py-2 border border-purple-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                // Layout padr√£o para outros testes
                <div className="space-y-4">
                  {selectedTest.campos.map((campo) => (
                    <div key={campo.nome}>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        {campo.label}
                      </label>
                      <input
                        type={campo.tipo}
                        value={testData[campo.nome] || ''}
                        onChange={(e) => handleInputChange(campo.nome, e.target.value)}
                        min={campo.min}
                        max={campo.max}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  ))}
                </div>
              )}

            {/* Bot√£o Calcular Resultado - apenas para testes que n√£o s√£o MEMORE */}
            {selectedTest.id !== 'memore' && (
              <div className="mt-6">
                <button
                  onClick={handleCalculate}
                  className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 px-6 rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-semibold shadow-md hover:shadow-lg transform hover:scale-105 flex items-center justify-center gap-2"
                >
                  <span>üìä</span>
                  Calcular Resultado
                </button>
              </div>
            )}

            {/* Layout em duas colunas para MEMORE */}
            {selectedTest.id === 'memore' && (
              <>
                <div className="bg-white rounded-xl shadow-soft border border-gray-200 p-8 animate-slide-in">
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    {/* Coluna Esquerda: Info do Teste */}
                    <div className="space-y-6">
                      {/* Header do Teste */}
                      <div>
                        <div className="flex items-center gap-3 mb-6">
                          <div className="w-12 h-12 bg-gradient-to-br from-pink-400 to-pink-600 rounded-xl flex items-center justify-center shadow-lg">
                            <span className="text-2xl">üß†</span>
                          </div>
                          <div>
                            <h3 className="text-2xl font-bold text-gray-900">Memore - Mem√≥ria</h3>
                            <p className="text-sm text-gray-600">Avalia√ß√£o da capacidade de mem√≥ria</p>
                          </div>
                        </div>
                      </div>
                      
                      {/* Campos de entrada manual - REMOVIDOS (s√≥ mostra contadores autom√°ticos) */}
                      <div className="hidden grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Verdadeiros Positivos</label>
                          <input
                            type="number"
                            value={testData.vp || ''}
                            onChange={(e) => setTestData(prev => ({ ...prev, vp: e.target.value }))}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="0"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Verdadeiros Negativos</label>
                          <input
                            type="number"
                            value={testData.vn || ''}
                            onChange={(e) => setTestData(prev => ({ ...prev, vn: e.target.value }))}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="0"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Falsos Negativos</label>
                          <input
                            type="number"
                            value={testData.fn || ''}
                            onChange={(e) => setTestData(prev => ({ ...prev, fn: e.target.value }))}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="0"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Falsos Positivos</label>
                          <input
                            type="number"
                            value={testData.fp || ''}
                            onChange={(e) => setTestData(prev => ({ ...prev, fp: e.target.value }))}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="0"
                          />
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Coluna Direita: Crivo de Corre√ß√£o */}
                  <div className="space-y-6">
                    {/* Se√ß√£o do Crivo */}
                    <div className="bg-white rounded-lg border border-gray-200 p-6">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                          <span className="text-xl">üß†</span>
                          MEMORE - Crivo de Corre√ß√£o
                        </h3>
                        <button
                          type="button"
                          onClick={clearMemoreMarks}
                          className="px-5 py-2.5 text-sm font-medium text-red-700 bg-red-50 border-2 border-red-200 rounded-lg hover:bg-red-100 hover:border-red-300 transition-all duration-200 shadow-sm hover:shadow-md flex items-center gap-2"
                        >
                          <span>üóëÔ∏è</span>
                          Limpar marca√ß√µes
                        </button>
                      </div>

                      {/* Crivo Visual do MEMORE - Layout de 3 colunas */}
                      <div className="bg-gray-50 rounded-lg p-4 mb-4">
                        <h4 className="text-sm font-semibold text-gray-700 mb-3 text-center">Crivo de Corre√ß√£o</h4>
                        <div className="grid grid-cols-3 gap-4">
                          {/* Coluna 1: A, B, C, D, E, F, 1, 2, 3, 4 */}
                          <div className="space-y-1">
                            {['A', 'B', 'C', 'D', 'E', 'F', '1', '2', '3', '4'].map((label, r) => {
                              const idx = r; // 0-9: A-F (0-5) + 1-4 (6-9)
                              const shouldMark = memoreKeyVP[idx];
                              const isMarked = memoreMarks[idx];
                              return (
                                <div key={`mem-row-${idx}`} className="flex items-center gap-2 py-1">
                                  <span className="text-xs font-medium text-gray-700 w-4">{label}.</span>
                                  <button
                                    type="button"
                                    onClick={() => toggleMemoreMark(idx)}
                                    className={`w-6 h-6 border-2 rounded flex items-center justify-center text-xs font-bold ${
                                      isMarked
                                        ? shouldMark
                                          ? 'bg-green-500 text-white border-green-500'
                                          : 'bg-orange-500 text-white border-orange-500'
                                        : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                                    } shadow-sm hover:shadow-md transition-all duration-200 hover:scale-110`}
                                  >
                                    {isMarked ? '‚úì' : ''}
                                  </button>
                                  <span className={`text-xs font-medium w-8 ${
                                    shouldMark ? 'text-green-600' : 'text-gray-500'
                                  }`}>
                                    {shouldMark ? 'VP' : 'VN'}
                                  </span>
                                </div>
                              );
                            })}
                          </div>

                          {/* Coluna 2: 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 */}
                          <div className="space-y-1">
                            {['5', '6', '7', '8', '9', '10', '11', '12', '13', '14'].map((label, r) => {
                              const idx = r + 10; // 10-19
                              const shouldMark = memoreKeyVP[idx];
                              const isMarked = memoreMarks[idx];
                              return (
                                <div key={`mem-row-${idx}`} className="flex items-center gap-2 py-1">
                                  <span className="text-xs font-medium text-gray-700 w-4">{label}.</span>
                                  <button
                                    type="button"
                                    onClick={() => toggleMemoreMark(idx)}
                                    className={`w-6 h-6 border-2 rounded flex items-center justify-center text-xs font-bold ${
                                      isMarked
                                        ? shouldMark
                                          ? 'bg-green-500 text-white border-green-500'
                                          : 'bg-orange-500 text-white border-orange-500'
                                        : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                                    } shadow-sm hover:shadow-md transition-all duration-200 hover:scale-110`}
                                  >
                                    {isMarked ? '‚úì' : ''}
                                  </button>
                                  <span className={`text-xs font-medium w-8 ${
                                    shouldMark ? 'text-green-600' : 'text-gray-500'
                                  }`}>
                                    {shouldMark ? 'VP' : 'VN'}
                                  </span>
                                </div>
                              );
                            })}
                          </div>

                          {/* Coluna 3: 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 */}
                          <div className="space-y-1">
                            {['15', '16', '17', '18', '19', '20', '21', '22', '23', '24'].map((label, r) => {
                              const idx = r + 20; // 20-29
                              const shouldMark = memoreKeyVP[idx];
                              const isMarked = memoreMarks[idx];
                              return (
                                <div key={`mem-row-${idx}`} className="flex items-center gap-2 py-1">
                                  <span className="text-xs font-medium text-gray-700 w-4">{label}.</span>
                                  <button
                                    type="button"
                                    onClick={() => toggleMemoreMark(idx)}
                                    className={`w-6 h-6 border-2 rounded flex items-center justify-center text-xs font-bold ${
                                      isMarked
                                        ? shouldMark
                                          ? 'bg-green-500 text-white border-green-500'
                                          : 'bg-orange-500 text-white border-orange-500'
                                        : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                                    } shadow-sm hover:shadow-md transition-all duration-200 hover:scale-110`}
                                  >
                                    {isMarked ? '‚úì' : ''}
                                  </button>
                                  <span className={`text-xs font-medium w-8 ${
                                    shouldMark ? 'text-green-600' : 'text-gray-500'
                                  }`}>
                                    {shouldMark ? 'VP' : 'VN'}
                                  </span>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      </div>

                      {/* Contadores - Movidos para baixo do crivo */}
                      <div className="bg-white border-2 border-gray-200 rounded-xl p-6 mt-6">
                        <div className="text-base font-bold text-gray-800 mb-4">Contadores:</div>
                        <div className="grid grid-cols-2 gap-4 mb-4">
                          <div className="bg-gray-50 rounded-lg p-3">
                            <span className="text-xs text-gray-600 font-medium">VP:</span>
                            <span className="text-lg font-bold text-gray-900 ml-2">{testData.vp || 0}</span>
                          </div>
                          <div className="bg-gray-50 rounded-lg p-3">
                            <span className="text-xs text-gray-600 font-medium">VN:</span>
                            <span className="text-lg font-bold text-gray-900 ml-2">{testData.vn || 0}</span>
                          </div>
                          <div className="bg-gray-50 rounded-lg p-3">
                            <span className="text-xs text-gray-600 font-medium">FN:</span>
                            <span className="text-lg font-bold text-gray-900 ml-2">{testData.fn || 0}</span>
                          </div>
                          <div className="bg-gray-50 rounded-lg p-3">
                            <span className="text-xs text-gray-600 font-medium">FP:</span>
                            <span className="text-lg font-bold text-gray-900 ml-2">{testData.fp || 0}</span>
                          </div>
                        </div>
                        <div className="bg-blue-50 border-2 border-blue-200 rounded-xl p-4">
                          <div className="text-sm font-semibold text-blue-700 mb-1">Resultado (EB):</div>
                          <div className="text-3xl font-bold text-blue-800">{testData.eb || 0}</div>
                          <div className="text-xs text-blue-600 mt-1">(VP + VN) - (FN + FP)</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Bot√£o Calcular Resultado centralizado - apenas para MEMORE */}
                <div className="flex justify-center mt-8">
                  <button
                    onClick={handleCalculate}
                    className="bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 px-10 rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-bold text-lg shadow-lg hover:shadow-xl transform hover:scale-105 flex items-center gap-3"
                  >
                    <span className="text-2xl">üìä</span>
                    Calcular Resultado
                  </button>
                </div>
              </>
            )}

            {/* Layout especial para MIG - Vers√£o 2.0 Modernizada - FOR√áA ATUALIZA√á√ÉO */}
            {selectedTest.id === 'mig' && (
              <div className="bg-white rounded-xl shadow-soft border border-gray-200 p-8 animate-slide-in"  key="mig-v2">
                {console.log('üöÄ MIG LAYOUT 2 COLUNAS CARREGADO - VERS√ÉO 2.0!')}
                <div className="grid grid-cols-2 gap-8">
                  {/* Coluna Esquerda: Info do Teste */}
                  <div className="space-y-6">
                    {/* Header do Teste */}
                    <div>
                      <div className="flex items-center gap-3 mb-6">
                        <div className="w-12 h-12 bg-gradient-to-br from-indigo-400 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-2xl">üß†</span>
                        </div>
                        <div>
                          <h3 className="text-2xl font-bold text-gray-900">MIG - Avalia√ß√£o Psicol√≥gica</h3>
                          <p className="text-sm text-gray-600">Mem√≥ria Imediata Geral</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Coluna Direita: Crivo de Corre√ß√£o */}
                  <div className="space-y-6">
                    {/* Se√ß√£o do Crivo */}
                    <div className="bg-white rounded-lg border border-gray-200 p-6">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                          <span className="text-xl">üìù</span>
                          MIG - Crivo de Corre√ß√£o
                        </h3>
                        <button
                          onClick={() => {
                            setMigAnswers(Array(28).fill(''));
                            setMigAnswerKey(Array(28).fill(''));
                          }}
                          className="px-4 py-2 text-sm font-medium text-red-700 bg-red-50 border-2 border-red-200 rounded-lg hover:bg-red-100 hover:border-red-300 transition-all duration-200 shadow-sm hover:shadow-md flex items-center gap-2"
                        >
                          <span>üóëÔ∏è</span>
                          Limpar marca√ß√µes
                        </button>
                      </div>

                  {/* Grid do Gabarito - 4 colunas de 7 quest√µes cada */}
                  <div className="bg-gray-50 rounded-lg p-4 mb-4">
                    <h4 className="text-sm font-semibold text-gray-700 mb-3 text-center">Gabarito de Corre√ß√£o</h4>
                    <div className="grid grid-cols-4 gap-4">
                      {/* Coluna 1: Quest√µes 1-7 */}
                      <div className="space-y-1">
                        {Array.from({ length: 7 }, (_, i) => i + 1).map((questao) => {
                          const idx = questao - 1;
                          return (
                            <div key={`mig-gabarito-${idx}`} className="flex items-center gap-2 py-1">
                              <span className="text-xs font-medium text-gray-700 w-6">{questao}.</span>
                              <select
                                value={migAnswerKey[idx] || ''}
                                onChange={(e) => {
                                  const newKey = [...migAnswerKey];
                                  newKey[idx] = e.target.value;
                                  setMigAnswerKey(newKey);
                                }}
                                disabled={!migKeyEditMode}
                                className="w-12 px-1 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:bg-gray-100"
                              >
                                <option value="">-</option>
                                <option value="A">A</option>
                                <option value="B">B</option>
                                <option value="C">C</option>
                                <option value="D">D</option>
                              </select>
                              <div className="flex items-center gap-1">
                                <input
                                  type="text"
                                  value={migAnswers[idx] || ''}
                                  onChange={(e) => {
                                    const newAnswers = [...migAnswers];
                                    newAnswers[idx] = e.target.value.toUpperCase();
                                    setMigAnswers(newAnswers);
                                  }}
                                  placeholder="Resposta"
                                  className={`w-12 px-1 py-1 border rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500 ${getAnswerColor(idx)}`}
                                  maxLength="1"
                                />
                                {getAnswerIcon(idx) && (
                                  <span className={`text-sm font-bold ${migAnswers[idx] === migAnswerKey[idx] ? 'text-green-600' : 'text-orange-600'}`}>
                                    {getAnswerIcon(idx)}
                                  </span>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>

                      {/* Coluna 2: Quest√µes 8-14 */}
                      <div className="space-y-1">
                        {Array.from({ length: 7 }, (_, i) => i + 8).map((questao) => {
                          const idx = questao - 1;
                          return (
                            <div key={`mig-gabarito-${idx}`} className="flex items-center gap-2 py-1">
                              <span className="text-xs font-medium text-gray-700 w-6">{questao}.</span>
                              <select
                                value={migAnswerKey[idx] || ''}
                                onChange={(e) => {
                                  const newKey = [...migAnswerKey];
                                  newKey[idx] = e.target.value;
                                  setMigAnswerKey(newKey);
                                }}
                                disabled={!migKeyEditMode}
                                className="w-12 px-1 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:bg-gray-100"
                              >
                                <option value="">-</option>
                                <option value="A">A</option>
                                <option value="B">B</option>
                                <option value="C">C</option>
                                <option value="D">D</option>
                              </select>
                              <div className="flex items-center gap-1">
                                <input
                                  type="text"
                                  value={migAnswers[idx] || ''}
                                  onChange={(e) => {
                                    const newAnswers = [...migAnswers];
                                    newAnswers[idx] = e.target.value.toUpperCase();
                                    setMigAnswers(newAnswers);
                                  }}
                                  placeholder="Resposta"
                                  className={`w-12 px-1 py-1 border rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500 ${getAnswerColor(idx)}`}
                                  maxLength="1"
                                />
                                {getAnswerIcon(idx) && (
                                  <span className={`text-sm font-bold ${migAnswers[idx] === migAnswerKey[idx] ? 'text-green-600' : 'text-orange-600'}`}>
                                    {getAnswerIcon(idx)}
                                  </span>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>

                      {/* Coluna 3: Quest√µes 15-21 */}
                      <div className="space-y-1">
                        {Array.from({ length: 7 }, (_, i) => i + 15).map((questao) => {
                          const idx = questao - 1;
                          return (
                            <div key={`mig-gabarito-${idx}`} className="flex items-center gap-2 py-1">
                              <span className="text-xs font-medium text-gray-700 w-6">{questao}.</span>
                              <select
                                value={migAnswerKey[idx] || ''}
                                onChange={(e) => {
                                  const newKey = [...migAnswerKey];
                                  newKey[idx] = e.target.value;
                                  setMigAnswerKey(newKey);
                                }}
                                disabled={!migKeyEditMode}
                                className="w-12 px-1 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:bg-gray-100"
                              >
                                <option value="">-</option>
                                <option value="A">A</option>
                                <option value="B">B</option>
                                <option value="C">C</option>
                                <option value="D">D</option>
                              </select>
                              <div className="flex items-center gap-1">
                                <input
                                  type="text"
                                  value={migAnswers[idx] || ''}
                                  onChange={(e) => {
                                    const newAnswers = [...migAnswers];
                                    newAnswers[idx] = e.target.value.toUpperCase();
                                    setMigAnswers(newAnswers);
                                  }}
                                  placeholder="Resposta"
                                  className={`w-12 px-1 py-1 border rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500 ${getAnswerColor(idx)}`}
                                  maxLength="1"
                                />
                                {getAnswerIcon(idx) && (
                                  <span className={`text-sm font-bold ${migAnswers[idx] === migAnswerKey[idx] ? 'text-green-600' : 'text-orange-600'}`}>
                                    {getAnswerIcon(idx)}
                                  </span>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>

                      {/* Coluna 4: Quest√µes 22-28 */}
                      <div className="space-y-1">
                        {Array.from({ length: 7 }, (_, i) => i + 22).map((questao) => {
                          const idx = questao - 1;
                          return (
                            <div key={`mig-gabarito-${idx}`} className="flex items-center gap-2 py-1">
                              <span className="text-xs font-medium text-gray-700 w-6">{questao}.</span>
                              <select
                                value={migAnswerKey[idx] || ''}
                                onChange={(e) => {
                                  const newKey = [...migAnswerKey];
                                  newKey[idx] = e.target.value;
                                  setMigAnswerKey(newKey);
                                }}
                                disabled={!migKeyEditMode}
                                className="w-12 px-1 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:bg-gray-100"
                              >
                                <option value="">-</option>
                                <option value="A">A</option>
                                <option value="B">B</option>
                                <option value="C">C</option>
                                <option value="D">D</option>
                              </select>
                              <div className="flex items-center gap-1">
                                <input
                                  type="text"
                                  value={migAnswers[idx] || ''}
                                  onChange={(e) => {
                                    const newAnswers = [...migAnswers];
                                    newAnswers[idx] = e.target.value.toUpperCase();
                                    setMigAnswers(newAnswers);
                                  }}
                                  placeholder="Resposta"
                                  className={`w-12 px-1 py-1 border rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500 ${getAnswerColor(idx)}`}
                                  maxLength="1"
                                />
                                {getAnswerIcon(idx) && (
                                  <span className={`text-sm font-bold ${migAnswers[idx] === migAnswerKey[idx] ? 'text-green-600' : 'text-orange-600'}`}>
                                    {getAnswerIcon(idx)}
                                  </span>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>

                      {/* Resumo dos Acertos */}
                      <div className="bg-white border-2 border-gray-200 rounded-xl p-6 mt-6">
                        <div className="text-base font-bold text-gray-800 mb-4">Resumo:</div>
                        <div className="grid grid-cols-2 gap-4 mb-4">
                          <div className="bg-green-50 rounded-lg p-3 border-2 border-green-200">
                            <span className="text-xs text-green-700 font-medium">Acertos:</span>
                            <span className="text-xl font-bold text-green-700 ml-2">{migCorrectCount}</span>
                            <span className="text-sm text-gray-600"> / 28</span>
                          </div>
                          <div className="bg-red-50 rounded-lg p-3 border-2 border-red-200">
                            <span className="text-xs text-red-700 font-medium">Erros:</span>
                            <span className="text-xl font-bold text-red-700 ml-2">{28 - migCorrectCount}</span>
                            <span className="text-sm text-gray-600"> / 28</span>
                          </div>
                        </div>
                        <div className="bg-blue-50 border-2 border-blue-200 rounded-xl p-4">
                          <div className="text-xs text-blue-600 mb-1">
                            üí° {autoCalcFromGabarito ? 'C√°lculo autom√°tico ativo' : 'C√°lculo manual'}
                          </div>
                          <div className="text-sm font-semibold text-blue-700">Percentual:</div>
                          <div className="text-2xl font-bold text-blue-800">{((migCorrectCount / 28) * 100).toFixed(1)}%</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Bot√£o Calcular Resultado - MIG */}
                <div className="flex justify-center mt-8">
                  <button
                    onClick={handleCalculate}
                    className="bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 px-10 rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-bold text-lg shadow-lg hover:shadow-xl transform hover:scale-105 flex items-center gap-3"
                  >
                    <span className="text-2xl">üìä</span>
                    Calcular Resultado
                  </button>
                </div>
              </div>
            )}

            {results && Object.keys(results).length > 0 && (
              <div>
                <h3 className="text-xl font-bold text-gray-900 mb-6 text-center">üìä Resultados do Teste</h3>
                
                {selectedTest.id === 'memore' && (
                  <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                    <h4 className="text-lg font-semibold text-gray-900 mb-4">üß† MEMORE - Resultados</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div className="bg-gray-50 p-4 rounded-lg">
                          <h5 className="font-semibold text-gray-700 mb-2">Contadores</h5>
                          <div className="space-y-2">
                            <div className="flex justify-between">
                              <span>Verdadeiros Positivos (VP):</span>
                              <span className="font-bold text-green-600">{testData.vp || 0}</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Verdadeiros Negativos (VN):</span>
                              <span className="font-bold text-green-600">{testData.vn || 0}</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Falsos Negativos (FN):</span>
                              <span className="font-bold text-red-600">{testData.fn || 0}</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Falsos Positivos (FP):</span>
                              <span className="font-bold text-red-600">{testData.fp || 0}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="space-y-4">
                        <div className="bg-blue-50 p-4 rounded-lg">
                          <h5 className="font-semibold text-blue-700 mb-2">Resultado Final</h5>
                          <div className="text-center">
                            <div className="text-3xl font-bold text-blue-800 mb-2">{results.resultadoFinal || testData.eb || 0}</div>
                            <div className="text-sm text-blue-600">Escore Bruto (EB)</div>
                            <div className="text-xs text-blue-500 mt-1">(VP + VN) - (FN + FP)</div>
                          </div>
                        </div>
                        {results.percentil && (
                          <div className="bg-green-50 p-4 rounded-lg">
                            <h5 className="font-semibold text-green-700 mb-2">Classifica√ß√£o</h5>
                            <div className="text-center">
                              <div className="text-2xl font-bold text-green-800 mb-1">{results.percentil}¬∫</div>
                              <div className="text-sm text-green-600">Percentil</div>
                              <div className="text-lg font-semibold text-green-700 mt-2">{results.classificacao}</div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                {selectedTest.id === 'mig' && (
                  <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                    <h4 className="text-lg font-semibold text-gray-900 mb-4">üßÆ MIG - Resultados</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div className="bg-gray-50 p-4 rounded-lg">
                          <h5 className="font-semibold text-gray-700 mb-2">Dados do Teste</h5>
                          <div className="space-y-2">
                            <div className="flex justify-between">
                              <span>Acertos:</span>
                              <span className="font-bold text-green-600">{testData.acertos || 0}</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Total de Quest√µes:</span>
                              <span className="font-bold text-gray-600">28</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Percentual de Acertos:</span>
                              <span className="font-bold text-blue-600">{((testData.acertos || 0) / 28 * 100).toFixed(1)}%</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Tipo de Avalia√ß√£o:</span>
                              <span className="font-bold text-gray-600">{testData.tipo_avaliacao || 'N/A'}</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Idade:</span>
                              <span className="font-bold text-gray-600">{testData.idade || foundPatient?.idade || 'N/A'}</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Escolaridade:</span>
                              <span className="font-bold text-gray-600">{testData.escolaridade || foundPatient?.escolaridade || 'N/A'}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="space-y-4">
                        <div className="bg-blue-50 p-4 rounded-lg">
                          <h5 className="font-semibold text-blue-700 mb-2">Resultado Final</h5>
                          <div className="text-center">
                            <div className="text-3xl font-bold text-blue-800 mb-2">{results.resultadoFinal || testData.acertos || 0}</div>
                            <div className="text-sm text-blue-600">Escore Bruto</div>
                            <div className="text-xs text-blue-500 mt-1">Acertos / 28</div>
                          </div>
                        </div>
                        {results.percentil && (
                          <div className="bg-green-50 p-4 rounded-lg">
                            <h5 className="font-semibold text-green-700 mb-2">Classifica√ß√£o</h5>
                            <div className="text-center">
                              <div className="text-2xl font-bold text-green-800 mb-1">{results.percentil}¬∫</div>
                              <div className="text-sm text-green-600">Percentil</div>
                              <div className="text-lg font-semibold text-green-700 mt-2">{results.classificacao}</div>
                            </div>
                          </div>
                        )}
                        {results.interpretacao && (
                          <div className="bg-yellow-50 p-4 rounded-lg">
                            <h5 className="font-semibold text-yellow-700 mb-2">Interpreta√ß√£o</h5>
                            <div className="text-sm text-yellow-800">{results.interpretacao}</div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Testes;

