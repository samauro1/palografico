{"ast":null,"code":"var _jsxFileName = \"D:\\\\zite\\\\palografico\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { api } from '../services/api';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n}\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      verifyToken();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const verifyToken = async () => {\n    try {\n      const response = await api.get('/auth/verify');\n      setUser(response.data.user);\n    } catch (error) {\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, senha) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        senha\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      setUser(user);\n      toast.success('Login realizado com sucesso!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Erro ao fazer login';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const register = async (nome, email, senha) => {\n    try {\n      const response = await api.post('/auth/register', {\n        nome,\n        email,\n        senha\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      setUser(user);\n      toast.success('Conta criada com sucesso!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Erro ao criar conta';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    toast.success('Logout realizado com sucesso!');\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","verifyToken","response","get","data","error","removeItem","login","email","senha","post","setItem","success","_error$response","_error$response$data","message","register","nome","_error$response2","_error$response2$data","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/zite/palografico/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { api } from '../services/api';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      verifyToken();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const verifyToken = async () => {\r\n    try {\r\n      const response = await api.get('/auth/verify');\r\n      setUser(response.data.user);\r\n    } catch (error) {\r\n      localStorage.removeItem('token');\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, senha) => {\r\n    try {\r\n      const response = await api.post('/auth/login', { email, senha });\r\n      const { user, token } = response.data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      setUser(user);\r\n      \r\n      toast.success('Login realizado com sucesso!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Erro ao fazer login';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const register = async (nome, email, senha) => {\r\n    try {\r\n      const response = await api.post('/auth/register', { nome, email, senha });\r\n      const { user, token } = response.data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      setUser(user);\r\n      \r\n      toast.success('Conta criada com sucesso!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Erro ao criar conta';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    toast.success('Logout realizado com sucesso!');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}